#### Question 1 ####

==== Question Statement ====
Describe with a figure or pseudocode, an algorithm which counts all the left external nodes in a binary tree. Your algorithm should use only the methods of the Binary Tree ADT.

==== Answer =====
countLeftExternalNode(Tree):
    if Tree.left() != null
        if Tree.right != null
            if Tree.left().isExternal()
                return 1 + countLeftExternalNode(Tree.right())
            return countLeftExternalNode(Tree.left()) + countLeftExternalNode(Tree.right())
        if Tree.left().isExternal()
            return 1
        return countLeftExternalNode(Tree.left())
    if Tree.right() != null
        return countLeftExternalNode(Tree.right())
    return 0


#### Question 2 ####

==== Question Statement ====
Consider a binary tree, where each node holds a single character. The nodes, in no particular order are ['A', 'E', 'F', 'M', 'N', 'U', 'X']

(a) Draw a representation of this binary tree such that a preorder traversal of the tree gives the result examfun

(b) Draw a representation of this binary tree such that a preorder traversal of the tree gives the result mafxuen

==== Answer ====
---- Part a ----

      E
     / \
    X   A
       / \
      M   F
         / \
        U   N

---- Part b ----

      M
     / \
    A   F
       / \
      X   U
         / \
        E   N

#### Question 3 ####

==== Question Statement ====
Write the pseudocode for an algorithm which counts the total number of descedants of a node in a binary tree

==== Answer ====
countDescendants(Tree):
    if Tree.left() != null
        if Tree.right() != null
            return 2 + countDescendants(Tree.left()) + countDescendants(Tree.right())
        return 1 + countDescendants(Tree.left())
    if Tree.right() != null
        return 1 + countDescendants(Tree.right())
    return 0

#### Question 4 ####

==== Question Statement ====
Write the Java implementation of the Binary Tree ADT.

==== Answer ====
See ~/src/projectCode20280/, where ~ is the project root folder
